grammar org.sbelang.dsl.SbeLangDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sbeLangDsl "http://www.sbelang.org/dsl/SbeLangDsl"

MessageSchema:
    schema=SchemaDeclaration
    types=TypeDeclarations
    //    messages=MessageDeclarations
;

SchemaDeclaration:
// schema org.sbelang.example id=1 version=1
// schema org.sbelang.example id=1 version=1 bigEndian
// schema org.sbelang.example id=1 version=1 headerType=org.sbelang.common.Header
// schema org.sbelang.example id=1 version=1 headerType=org.sbelang.common.Header bigEndian

// Each message schema corresponds to a java package [name]
// The id maps a numeric identifier to the schema
// The version is a monotonically increasing number
    'schema' name=QName 'id' '=' id=INT 'version' '=' version=INT optionalAttrs=OptionalSchemaAttrs;

OptionalSchemaAttrs:
    {OptionalSchemaAttrs} ('headerType' '=' headerType=QName)? (bigEndian?='bigEndian'?);

TypeDeclarations:
    'types' '{' simpleTypes+=SimpleTypeDeclaration+ (compositeTypes+=CompositeTypeDeclaration*) '}';

SimpleTypeDeclaration /* simpleDataType - primitiveTypeAttributes + versionAttributes */:
// length=INT characterEncoding=STRING for character types only
    'simpleType' name=Name ':' primitiveType=PrimitiveType ('[' length=OptionalInt ']')?
    versionModifiers=VersionModifiers;

VersionModifiers:
    {VersionModifiers}
    ('sinceVersion' '=' sinceVersion=OptionalInt)?
    ('deprecatedSinceVersion' '=' deprecatedSinceVersion=OptionalInt)?;

CompositeTypeDeclaration:
    'composite' name=Name '{'
    memberTypes+=MemberTypeDeclaration+
    (compositeTypes+=CompositeTypeDeclaration*)
    '}';

MemberTypeDeclaration:
    MemberCharTypeDeclaration | MemberNumericTypeDeclaration;

MemberCharTypeDeclaration:
    name=Name ':' primitiveType=CharPrimitive ('[' length=OptionalInt ']')?;

MemberNumericTypeDeclaration:
    name=Name ':' primitiveType=NumericPrimitive ('range' '=' rangeModifiers=RangeModifiers)?
    presence=NumericPresenceModifiers?;

RangeModifiers:
    {RangeModifiers} '[' min=OptionalSignedInt? ',' max=OptionalSignedInt? ']';

NumericPresenceModifiers:
    NumericConstantModifiers | NumericOptionalModifiers;

NumericConstantModifiers:
    ('constant' '=' constantValue=SignedInt);

NumericOptionalModifiers:
    (optional?='optional') |
    ('nullValue' '=' nullValue=OptionalSignedInt);

    /*
MessageDeclarations:
    'messages' '{' messages+=MessageDeclaration '}';

MessageDeclaration:
    'message' name=Name 'id' '=' id=INT '{' fields+=FieldDeclaration '}';

FieldDeclaration:
    name=Name ':' fieldEncodingType=[SimpleTypeDeclaration] '@' id=INT;
 */

// --------------------------------------------------------------------
CharPrimitive:
    'char';

NumericPrimitive:
    'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double';

PrimitiveType:
    CharPrimitive | NumericPrimitive;

QName:
    ID ('.' ID)*;

Name:
    ID;

OptionalInt returns ecore::EIntegerObject:
    INT;

OptionalSignedInt returns ecore::EIntegerObject:
    SignedInt;

SignedInt returns ecore::EInt:
    '-'? INT;
