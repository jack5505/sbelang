grammar org.sbelang.dsl.SbeLangDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sbeLangDsl "http://www.sbelang.org/dsl/SbeLangDsl"

MessageSchema:
    schema=SchemaDeclaration
    'types' '{'
    typeDelcarations+=TypeDeclaration+
    '}'
    messageDeclarations+=MessageDeclaration*;

SchemaDeclaration:
// schema org.sbelang.example id=1 version=1
// schema org.sbelang.example id=1 version=1 bigEndian
// schema org.sbelang.example id=1 version=1 headerType=org.sbelang.common.Header
// schema org.sbelang.example id=1 version=1 headerType=org.sbelang.common.Header bigEndian

// Each message schema corresponds to a java package [name]
// The id maps a numeric identifier to the schema
// The version is a monotonically increasing number
    'schema' name=QName 'id' '=' id=INT 'version' '=' version=INT optionalAttrs=OptionalSchemaAttrs;

OptionalSchemaAttrs:
    {OptionalSchemaAttrs} ('headerType' '=' headerType=QName)? (bigEndian?='bigEndian'?);

TypeDeclaration:
    SimpleTypeDeclaration | EnumDeclaration | SetDeclaration | CompositeTypeDeclaration;

SimpleTypeDeclaration /* simpleDataType - primitiveTypeAttributes + versionAttributes */:
// length=INT characterEncoding=STRING for character types only
    'simpleType' name=Name ':' primitiveType=PrimitiveType ('[' length=OptionalInt ']')?
    versionModifiers=VersionModifiers;

EnumDeclaration:
    'enum' name=Name ':' encodingType=EnumEncodingType versionModifiers=VersionModifiers '{'
    enumValues+=EnumValueDeclaration+
    '}';

EnumValueDeclaration:
    name=Name '(' value=EnumValue ')' versionModifiers=VersionModifiers;

EnumValue:
    INT | CHAR | CHAR_OCTAL;

VersionModifiers:
    {VersionModifiers}
    ('sinceVersion' '=' sinceVersion=OptionalInt)?
    ('deprecatedSinceVersion' '=' deprecatedSinceVersion=OptionalInt)?;

SetDeclaration:
    'set' name=Name ':' encodingType=SetEncodingType versionModifiers=VersionModifiers '{'
    setChoices+=SetChoiceDeclaration+
    '}';

SetChoiceDeclaration:
    name=Name '(' value=INT ')' versionModifiers=VersionModifiers;

CompositeTypeDeclaration:
    'composite' name=Name versionModifiers=VersionModifiers '{'
    compositeMembers+=CompositeMember+
    '}';

CompositeMember:
    MemberTypeDeclaration | CompositeTypeDeclaration;

MemberTypeDeclaration:
    EnumDeclaration |
    SetDeclaration |
    MemberRefTypeDeclaration /* XSD "refType" */ |
    MemberPrimitiveTypeDeclaration /* XSD "memberDataType" */;

MemberRefTypeDeclaration:
    name=Name ':' type=[SimpleTypeDeclaration] presence=PresenceModifiers?;

MemberPrimitiveTypeDeclaration:
    name=Name ':' primitiveType=PrimitiveType ('[' length=OptionalInt ']')?
    ('range' '=' rangeModifiers=RangeModifiers)?
    presence=PresenceModifiers?;

RangeModifiers:
    {RangeModifiers} '[' (min=ValueLiteral?) ',' (max=ValueLiteral?) ']';

MessageDeclaration:
    'message' block=BlockDeclaration;

GroupDeclaration:
    'group' ('(' dimensionType=[CompositeTypeDeclaration] ')')? block=BlockDeclaration;

BlockDeclaration:
    name=Name 'id' '=' id=INT versionModifiers=VersionModifiers '{'
    fieldDeclarations+=FieldDeclaration*
    groupDeclarations+=GroupDeclaration*
    rawDataBlockDeclaration=RawDataBlockDeclaration?
    '}';

FieldDeclaration:
    name=Name ':' fieldType=[TypeDeclaration] '@' id=INT
    presenceModifiers=PresenceModifiers?
    // TODO: add "valueRef" - Constant value of a field as a valid value of an enumeration; Valid only if presence= ”constant”  
    versionModifiers=VersionModifiers;

PresenceModifiers:
    PresenceConstantModifier | PresenceOptionalModifier;

PresenceConstantModifier:
    ('constant' '=' (constantValue=ValueLiteral));

PresenceOptionalModifier:
    (optional?='optional') |
    ('nullValue' '=' (nullValue=ValueLiteral));

RawDataBlockDeclaration:
    'data' '{'
    varDataDeclarations+=RawVariableDataDeclaration+
    '}';

RawVariableDataDeclaration:
    name=Name ':' dataEncodingType=[CompositeTypeDeclaration] '@' id=INT;

ValueLiteral:
    OptionalSignedInt | OptionalChar;

PrimitiveType:
    'char' | 'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double';

EnumEncodingType:
    'char' | 'uint8' | 'uint16';

SetEncodingType:
    'uint8' | 'uint16' | 'uint32' | 'uint64';

QName:
    ID ('.' ID)*;

Name:
    ID;

OptionalInt returns ecore::EIntegerObject:
    INT;

OptionalSignedInt returns ecore::EIntegerObject:
    SignedInt;

SignedInt returns ecore::EInt:
    '-'? INT;

OptionalChar returns ecore::ECharacterObject:
// A value converter extracts the proper character
    CHAR;

terminal CHAR_OCTAL:
    "'" '\\' ('0'..'9') ('0'..'9') ('0'..'9') "'";
    
terminal CHAR:
    "'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'")) "'";