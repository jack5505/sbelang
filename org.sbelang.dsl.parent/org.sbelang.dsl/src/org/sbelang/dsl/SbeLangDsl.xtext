grammar org.sbelang.dsl.SbeLangDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sbeLangDsl "http://www.sbelang.org/dsl/SbeLangDsl"

MessageSchema:
    schema=SchemaDeclaration
    'types' '{'
    typeDelcarations+=TypeDeclaration+
    '}'
    messageDeclarations+=MessageDeclaration*;

SchemaDeclaration:
    'schema' name=QName 'id' '=' id=INT 'version' '=' version=INT optionalAttrs=OptionalSchemaAttrs;

OptionalSchemaAttrs:
    {OptionalSchemaAttrs} ('headerType' '=' headerType=QName)? (bigEndian?='bigEndian'?);

TypeDeclaration:
    SimpleTypeDeclaration | EnumDeclaration | SetDeclaration | CompositeTypeDeclaration;

SimpleTypeDeclaration:
// The following attributes (XSD presenceAttributes) are only valid in
// message fields (XSD fieldType) and in basic member data types of
// composites (XSD memberDataType):
//
// presence, nullValue, minValue, maxValue, valueRef
// 
// See also: https://github.com/FIXTradingCommunity/fix-simple-binary-encoding/issues/31

// The following attributes (XSD primitiveTypeAttributes) are only valid
// in simple types (XSD simpleDataType) and in basic member data types
// of composites (XSD memberDataType):
// 
// primitiveType, length, characterEncoding
//
// In short, member data types in composites are very much like fields
// in messages (you can define everything and give semantic meaning)
// whereas simple types can only define base primitive type and length.
// When using a simple type, rest must be defined in the fields of
// messages themselves.
    'simpleType' name=Name ':' primitiveType=PrimitiveType ('[' length=OptionalInt ']')?
    versionModifiers=VersionModifiers;

EnumDeclaration:
    'enum' name=Name ':' encodingType=EnumEncodingType versionModifiers=VersionModifiers '{'
    enumValues+=EnumValueDeclaration+ '}';

EnumValueDeclaration:
    name=Name '(' value=EnumValue ')' versionModifiers=VersionModifiers;

SetDeclaration:
    'set' name=Name ':' encodingType=SetEncodingType versionModifiers=VersionModifiers '{'
    setChoices+=SetChoiceDeclaration+ '}';

SetChoiceDeclaration:
    name=Name '(' value=INT ')' versionModifiers=VersionModifiers;

CompositeTypeDeclaration:
    'composite' name=Name versionModifiers=VersionModifiers '{' compositeMembers+=CompositeMember+ '}';

CompositeMember:
    MemberRefTypeDeclaration | MemberInlineDeclaration;

MemberInlineDeclaration:
    EnumDeclaration | SetDeclaration | CompositeTypeDeclaration;

MemberRefTypeDeclaration:
    name=Name ':' (type=[TypeDeclaration] | primitiveType=PrimitiveType) ('[' length=OptionalInt ']')? ('range' '='
    range=RangeModifiers)? presence=PresenceModifiers?;

FieldDeclaration:
    name=Name ':' (fieldType=[TypeDeclaration] | primitiveType=PrimitiveType) '@' id=INT ('range' '='
    range=RangeModifiers)? presence=PresenceModifiers?
    // TODO: add "valueRef" - Constant value of a field as a valid value of an enumeration; Valid only if presence= ”constant”  
    versionModifiers=VersionModifiers;

MessageDeclaration:
    'message' block=BlockDeclaration;

GroupDeclaration:
    'group' ('(' dimensionType=[CompositeTypeDeclaration] ')')? block=BlockDeclaration;

BlockDeclaration:
    name=Name 'id' '=' id=INT versionModifiers=VersionModifiers '{' fieldDeclarations+=FieldDeclaration*
    groupDeclarations+=GroupDeclaration* rawDataBlockDeclaration=RawDataBlockDeclaration? '}';

RawDataBlockDeclaration:
    'data' '{' varDataDeclarations+=RawVariableDataDeclaration+ '}';

RawVariableDataDeclaration:
    name=Name ':' dataEncodingType=[CompositeTypeDeclaration] '@' id=INT;

    // Modifiers =========================================================

VersionModifiers:
    {VersionModifiers} ('sinceVersion' '=' sinceVersion=OptionalInt)? ('deprecatedSinceVersion' '='
    deprecatedSinceVersion=OptionalInt)?;

RangeModifiers:
    {RangeModifiers} '[' (min=ValueLiteral?) ',' (max=ValueLiteral?) ']';

PresenceModifiers:
    PresenceConstantModifier | PresenceOptionalModifier;

PresenceConstantModifier:
    ('constant' '=' (constantValue=ValueLiteral));

PresenceOptionalModifier:
    (optional?='optional') | ('nullValue' '=' (nullValue=ValueLiteral));

    // Literals/Terminals ================================================

EnumValue:
    INT | CHAR | CHAR_OCTAL;

ValueLiteral:
    OptionalSignedInt | OptionalChar;

PrimitiveType:
    'char' | 'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double';

EnumEncodingType:
    'char' | 'uint8' | 'uint16';

SetEncodingType:
    'uint8' | 'uint16' | 'uint32' | 'uint64';

QName:
    ID ('.' ID)*;

Name:
    ID;

OptionalInt returns ecore::EIntegerObject:
    INT;

OptionalSignedInt returns ecore::EIntegerObject:
    SignedInt;

SignedInt returns ecore::EInt:
    '-'? INT;

OptionalChar returns ecore::ECharacterObject:
// A value converter extracts the proper character
    CHAR;

terminal CHAR_OCTAL:
    "'" '\\' ('0'..'9') ('0'..'9') ('0'..'9') "'";

terminal CHAR:
    "'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'")) "'";