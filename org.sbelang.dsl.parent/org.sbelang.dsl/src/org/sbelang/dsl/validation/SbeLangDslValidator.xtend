/*
 * generated by Xtext 2.13.0
 */
package org.sbelang.dsl.validation

import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.validation.Check
import org.sbelang.dsl.sbeLangDsl.EnumDeclaration
import org.sbelang.dsl.sbeLangDsl.MemberNumericTypeDeclaration
import org.sbelang.dsl.sbeLangDsl.MessageSchema
import org.sbelang.dsl.sbeLangDsl.NumericConstantModifiers
import org.sbelang.dsl.sbeLangDsl.SbeLangDslPackage
import org.sbelang.dsl.sbeLangDsl.VersionModifiers
import org.sbelang.dsl.sbeLangDsl.SetDeclaration

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SbeLangDslValidator extends AbstractSbeLangDslValidator {

    public static val CHAR_PRIMITIVE = 'char'

    @Check
    def checkSet(SetDeclaration sd) {
        var idx = 0
        val maxValidBitIdx = switch (sd.encodingType) {
            case 'uint8': 7
            case 'uint16': 15
            case 'uint32': 31
            case 'uint64': 63
            default: -1
        }

        for (choice : sd.setChoices) {
            if ((choice.value < 0) || (choice.value > maxValidBitIdx))
                error(
                    '''Value is [«choice.value»] is ousid the valid range of [0,«maxValidBitIdx»] for «sd.encodingType»!''',
                    sd,
                    SbeLangDslPackage.Literals.SET_DECLARATION__SET_CHOICES,
                    idx
                )

            idx = idx + 1
        }
    }

    @Check
    def checkEnum(EnumDeclaration ed) {
        var idx = 0
        switch ed.encodingType {
            case 'char':
                for (ev : ed.enumValues) {
                    val String v = ev.value.trim
                    if (v.length !== 3) {
                        error(
                            '''Value is [«ev.value»], but must be exactly ONE character in single quotes!''',
                            ev,
                            SbeLangDslPackage.Literals.ENUM_VALUE_DECLARATION__VALUE,
                            idx
                        )
                    }
                }
            case 'uint8',
            case 'uint16':
                for (ev : ed.enumValues) {
                    try {
                        val int value = Integer.parseInt(ev.value);
                        val max = if(ed.encodingType == 'uint8') 255 else 65535
                        if ((value < 0) || (value > max))
                            error(
                                '''Value is [«ev.value»] which is outside the valid range [0,«max»]!''',
                                ev,
                                SbeLangDslPackage.Literals.ENUM_VALUE_DECLARATION__VALUE,
                                idx
                            )
                    } catch (Exception e) {
                        error(
                            '''Value is [«ev.value»], but must be a positive integer!''',
                            ev,
                            SbeLangDslPackage.Literals.ENUM_VALUE_DECLARATION__VALUE,
                            idx
                        )
                    }
                    idx = idx + 1
                }
        }
    }

    @Check
    def checkNumericRangeIsPropder(MemberNumericTypeDeclaration mntd) {
        if(mntd.rangeModifiers === null) return; // no range can't be wrong
        if (mntd.presence !== null) {
            // if constant, range does not make sense...
            if (mntd.presence instanceof NumericConstantModifiers)
                error(
                    "You can't specify a range for a constant!",
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }

        if ((mntd.rangeModifiers.min !== null) && (mntd.rangeModifiers.max !== null)) {
            if (mntd.rangeModifiers.max < mntd.rangeModifiers.min)
                error(
                    '''Minimum range of («mntd.rangeModifiers.min») cannot exceed maximum of («mntd.rangeModifiers.max»)''',
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }
    }

    @Check
    def checkVersionModifiers(VersionModifiers vm) {
        if (vm.sinceVersion !== null) {
            val ms = EcoreUtil.getRootContainer(vm) as MessageSchema

            if (vm.sinceVersion > ms.schema.version) {
                error(
                    '''The sinceVersion(«vm.sinceVersion») value cannot be greater than the schema version(«ms.schema.version») value!''',
                    vm,
                    SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                )
            }

            if (vm.deprecatedSinceVersion !== null) {
                if (vm.deprecatedSinceVersion > ms.schema.version) {
                    error(
                        '''The deprecatedSinceVersion(«vm.deprecatedSinceVersion») value cannot be greater than the schema version(«ms.schema.version») value!''',
                        vm,
                        SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                    )
                }

                if (vm.deprecatedSinceVersion <= vm.sinceVersion) {
                    error(
                        '''The deprecatedSinceVersion(«vm.deprecatedSinceVersion») value must be greater than the since version(«vm.sinceVersion») value!''',
                        vm,
                        SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                    )
                }
            }
        }
    }
}
