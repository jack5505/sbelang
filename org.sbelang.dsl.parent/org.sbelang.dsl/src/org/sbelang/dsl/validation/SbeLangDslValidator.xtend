/*
 * generated by Xtext 2.13.0
 */
package org.sbelang.dsl.validation

import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.validation.Check
import org.sbelang.dsl.sbeLangDsl.EnumDeclaration
import org.sbelang.dsl.sbeLangDsl.FieldDeclaration
import org.sbelang.dsl.sbeLangDsl.MemberNumericTypeDeclaration
import org.sbelang.dsl.sbeLangDsl.MessageSchema
import org.sbelang.dsl.sbeLangDsl.NumericConstantModifiers
import org.sbelang.dsl.sbeLangDsl.PresenceConstantModifier
import org.sbelang.dsl.sbeLangDsl.PresenceModifiers
import org.sbelang.dsl.sbeLangDsl.SbeLangDslPackage
import org.sbelang.dsl.sbeLangDsl.SetDeclaration
import org.sbelang.dsl.sbeLangDsl.SimpleTypeDeclaration
import org.sbelang.dsl.sbeLangDsl.TypeDeclaration
import org.sbelang.dsl.sbeLangDsl.VersionModifiers

import static org.sbelang.dsl.SbeLangDslValueUtils.isValidLiteral

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SbeLangDslValidator extends AbstractSbeLangDslValidator {

    public static val CHAR_PRIMITIVE = 'char'

    @Check
    def checkField(FieldDeclaration fd) {
        val type = fd.fieldType
        val presence = fd.presenceModifiers
        checkPresence(presence, type)
    }

    def checkPresence(PresenceModifiers presenceModifiers, TypeDeclaration typeDeclaration) {
        switch (presenceModifiers) {
            PresenceConstantModifier:
                validatePresenceConstant(presenceModifiers, typeDeclaration)
        // TODO: PresenceOptionalModifier: any validation required for this?
        }
    }

    def validatePresenceConstant(PresenceConstantModifier constantModifier, TypeDeclaration typeDeclaration) {
        switch typeDeclaration {
            SimpleTypeDeclaration:
                if (! isValidLiteral(constantModifier.constantValue, typeDeclaration.primitiveType)) {
                    error('''The value [«constantModifier.constantValue»] is not valid for the type [«typeDeclaration.primitiveType»]''',
                        constantModifier, SbeLangDslPackage.Literals.PRESENCE_CONSTANT_MODIFIER__CONSTANT_VALUE)
                }
//            EnumDeclaration:
//            SetDeclaration:
//            CompositeTypeDeclaration:
        }
    }

    @Check
    def checkSet(SetDeclaration sd) {
        var idx = 0
        val maxValidBitIdx = switch (sd.encodingType) {
            case 'uint8': 7
            case 'uint16': 15
            case 'uint32': 31
            case 'uint64': 63
            default: -1
        }

        for (choice : sd.setChoices) {
            if ((choice.value < 0) || (choice.value > maxValidBitIdx))
                error(
                    '''Value is [«choice.value»] is ousid the valid range of [0,«maxValidBitIdx»] for «sd.encodingType»!''',
                    sd,
                    SbeLangDslPackage.Literals.SET_DECLARATION__SET_CHOICES,
                    idx
                )

            idx = idx + 1
        }
    }

    @Check
    def checkEnum(EnumDeclaration ed) {
        var idx = 0
        for (ev : ed.enumValues) {
            if (!isValidLiteral(ev.value, ed.encodingType)) {
                error(
                    '''Value is [«ev.value»] which is outside the valid range for encoding typ [«ed.encodingType»]!''',
                    ev,
                    SbeLangDslPackage.Literals.ENUM_VALUE_DECLARATION__VALUE,
                    idx
                )
                idx = idx + 1
            }
        }
    }

    @Check
    def checkNumericRangeIsPropder(MemberNumericTypeDeclaration mntd) {
        if(mntd.rangeModifiers === null) return; // no range can't be wrong
        if (mntd.presence !== null) {
            // if constant, range does not make sense...
            if (mntd.presence instanceof NumericConstantModifiers)
                error(
                    "You can't specify a range for a constant!",
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }

        if ((mntd.rangeModifiers.min !== null) && (mntd.rangeModifiers.max !== null)) {
            if (mntd.rangeModifiers.max < mntd.rangeModifiers.min)
                error(
                    '''Minimum range of («mntd.rangeModifiers.min») cannot exceed maximum of («mntd.rangeModifiers.max»)''',
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }
        
        if (!isValidLiteral(mntd.rangeModifiers.min.toString, mntd.primitiveType)) {
                 error(
                    '''Minimum range of («mntd.rangeModifiers.min») is not within range of type («mntd.primitiveType»)''',
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }
        
        if (!isValidLiteral(mntd.rangeModifiers.max.toString, mntd.primitiveType)) {
                 error(
                    '''Maximum range of («mntd.rangeModifiers.max») is not within range of type («mntd.primitiveType»)''',
                    SbeLangDslPackage.Literals.MEMBER_NUMERIC_TYPE_DECLARATION__RANGE_MODIFIERS
                )
        }
    }

    @Check
    def checkVersionModifiers(VersionModifiers vm) {
        if (vm.sinceVersion !== null) {
            val ms = EcoreUtil.getRootContainer(vm) as MessageSchema

            if (vm.sinceVersion > ms.schema.version) {
                error(
                    '''The sinceVersion(«vm.sinceVersion») value cannot be greater than the schema version(«ms.schema.version») value!''',
                    vm,
                    SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                )
            }

            if (vm.deprecatedSinceVersion !== null) {
                if (vm.deprecatedSinceVersion > ms.schema.version) {
                    error(
                        '''The deprecatedSinceVersion(«vm.deprecatedSinceVersion») value cannot be greater than the schema version(«ms.schema.version») value!''',
                        vm,
                        SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                    )
                }

                if (vm.deprecatedSinceVersion <= vm.sinceVersion) {
                    error(
                        '''The deprecatedSinceVersion(«vm.deprecatedSinceVersion») value must be greater than the since version(«vm.sinceVersion») value!''',
                        vm,
                        SbeLangDslPackage.Literals.VERSION_MODIFIERS__DEPRECATED_SINCE_VERSION
                    )
                }
            }
        }
    }
}
