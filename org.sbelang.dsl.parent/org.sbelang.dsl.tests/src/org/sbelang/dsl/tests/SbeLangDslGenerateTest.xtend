/*
 * generated by Xtext 2.13.0
 */
package org.sbelang.dsl.tests

import com.google.inject.Injector
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.sbelang.dsl.SbeLangDslStandaloneSetup
import org.sbelang.dsl.generator.java.SbeLangDslJavaGenerator
import org.sbelang.dsl.generator.SbeLangDslXmlGenerator

@RunWith(XtextRunner)
@InjectWith(SbeLangDslInjectorProvider)
class SbeLangDslGenerateTest {
    @Test
    def void testXmlGenerate() {
        val Injector injector = new SbeLangDslStandaloneSetup().createInjectorAndDoEMFRegistration()
        val XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet);

        val Resource sbeLangFileResource = resourceSet.getResource(URI.createURI("resources/AllFeatures.sbelang"),
            true);

        val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess
        val IGeneratorContext ctx = new GeneratorContext

        val SbeLangDslXmlGenerator g = new SbeLangDslXmlGenerator
        g.beforeGenerate(sbeLangFileResource, fsa, ctx)
        g.doGenerate(sbeLangFileResource, fsa, ctx)
        g.afterGenerate(sbeLangFileResource, fsa, ctx)

        val CharSequence xmlOutput = fsa.textFiles.get(IFileSystemAccess.DEFAULT_OUTPUT +
            "org.sbelang.examples.v2.AllFeatures.xml");
        Assert.assertNotNull(xmlOutput)

        val String rawExpectedOutput = new String(
            Files.readAllBytes(Paths.get(new File("resources/AllFeatures.xml").getAbsolutePath())))
        // resource file has UNIX line breaks (LF); replace with system line breaks so that test
        // is portable to windows (where actual output will have CRLF instead of just LF)
        val String expectedXmlOutput = rawExpectedOutput.replace('\n', System.lineSeparator);
        // the XML output has a null (zero) character; we want to strip that out
        // as it is illegal for XML; in the expected output it has been replaced
        // with a space character so we do the same here
        var char nullChar // we do not set a value as it defaults to zero
        val outputWithStrippedNullChars = xmlOutput.toString.replace(nullChar, ' ')

        if (!expectedXmlOutput.equals(outputWithStrippedNullChars)) {

            val expectedLines = expectedXmlOutput.split(System.getProperty("line.separator"));
            val actualLines = outputWithStrippedNullChars.split(System.getProperty("line.separator"));

            val max = Math.max(expectedLines.length, actualLines.length)
            for (var i = 0; i < max; i += 1) {
                if (!expectedLines.get(i).equals(actualLines.get(i))) {
                    System.err.println(
                        '''Line «i» differs:
                            expected: «expectedLines.get(i)»
                              actual: «actualLines.get(i)»
                        ''')
                    i = max + 1; // break loop
                }
            }

            val f = Files.createTempFile("sbeLang", ".xml");
            Files.write(f.toAbsolutePath, outputWithStrippedNullChars.bytes)
            System.err.println("Wrote output to: " + f.toAbsolutePath)
        }

        Assert.assertEquals(expectedXmlOutput, outputWithStrippedNullChars);
    }

    @Test
    def void testJavaGenerate() {
        val Injector injector = new SbeLangDslStandaloneSetup().createInjectorAndDoEMFRegistration()
        val XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet);
        val Resource resource = resourceSet.getResource(URI.createURI("resources/AllFeatures.sbelang"), true);

        val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess
        val IGeneratorContext ctx = new GeneratorContext

        val SbeLangDslJavaGenerator g = new SbeLangDslJavaGenerator
        g.beforeGenerate(resource, fsa, ctx)
        g.doGenerate(resource, fsa, ctx)
        g.afterGenerate(resource, fsa, ctx)

        Assert.assertNotNull(fsa.textFiles.get(getPackageFilename('MessageSchema')))
        Assert.assertNotNull(fsa.textFiles.get(getPackageFilename('DATAEncoder')))
    }

    private def getPackageFilename(String className) {
        IFileSystemAccess.DEFAULT_OUTPUT + EXPECTED_PACKAGE_PATH + className + '.java';
    }

    static val EXPECTED_PACKAGE_PATH = "org/sbelang/examples/v2/AllFeatures/".replace('/', File.separatorChar)

}
