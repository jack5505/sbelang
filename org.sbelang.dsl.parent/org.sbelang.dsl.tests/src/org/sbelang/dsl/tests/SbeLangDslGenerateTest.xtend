/*
 * generated by Xtext 2.13.0
 */
package org.sbelang.dsl.tests

import com.google.inject.Injector
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith
import org.sbelang.dsl.SbeLangDslStandaloneSetup
import org.sbelang.dsl.generator.SbeLangDslGenerator

@RunWith(XtextRunner)
@InjectWith(SbeLangDslInjectorProvider)
class SbeLangDslGenerateTest {	
    @Test
    def void testGenerate() {
        val Injector injector = new SbeLangDslStandaloneSetup().createInjectorAndDoEMFRegistration()
        val XtextResourceSet resourceSet = injector.getInstance(XtextResourceSet);
        val Resource resource = resourceSet.getResource(URI.createURI("resources/TestCase.sbelang"), true);

        val InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess
        val IGeneratorContext ctx = new GeneratorContext

        val SbeLangDslGenerator g = new SbeLangDslGenerator
        g.doGenerate(resource, fsa, ctx)
        System.out.println(fsa.textFiles.get(IFileSystemAccess.DEFAULT_OUTPUT + "TestCase.sbe.xml"))
    }
}
