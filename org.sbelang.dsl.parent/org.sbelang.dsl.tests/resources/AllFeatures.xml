<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<sbe:messageSchema xmlns:sbe="http://fixprotocol.io/2016/sbe"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" package="org.sbe.reference" id="91" version="0"
    byteOrder="littleEndian" xsi:schemaLocation="http://fixprotocol.io/2016/sbe sbe.xsd">

    <types>
        <!--
            THE FOLLOWING TYPES ARE PRE-DEFINED AND THEIR NAMES RESERVED
            =============================================================

            <type name="char" primitiveType="char" length=1 semanticType="US-ASCII character" />
            minValue = 32 (space), maxValue = 126, nullValue=0

            <type name="int8" primitiveType="int8" length=1 semanticType="Signed 8-bit" />
            minValue = -127, maxValue = 127, nullValue=-128

            <type name="int16" primitiveType="int16" length=1 semanticType="Signed 16-bit" />
            minValue = -32767, maxValue = 32767, nullValue=-32768

            <type name="int32" primitiveType="int32" length=1 semanticType="Signed 32-bit" />
            minValue = -2147483647, maxValue = 2147483647, nullValue=-2147483648

            <type name="int64" primitiveType="int64" length=1 semanticType="Signed 64-bit" />
            minValue = -9223372036854775807, maxValue = 9223372036854775807, nullValue=-9223372036854775808

            <type name="uint8" primitiveType="uint8" length=1 semanticType="Unsigned 8-bit" />
            minValue = 0, maxValue = 254, nullValue=255

            <type name="uint16" primitiveType="uint16" length=1 semanticType="Unsigned 16-bit" />
            minValue = 0, maxValue = 65534, nullValue=65535

            <type name="uint32" primitiveType="uint32" length=1 semanticType="Unsigned 32-bit" />
            minValue = 0, maxValue = 4294967294, nullValue=4294967295

            <type name="uint64" primitiveType="uint64" length=1 semanticType="Unsigned 64-bit" />
            minValue = 0, maxValue = 18446744073709551614, nullValue=18446744073709551615

            <type name="float" primitiveType="float" length=1 semanticType="IEEE 754-2008 float" />
            minValue = 1.401298464324817E-45f, maxValue = 3.4028234663852886E38f, nullValue=Float.NaN

            <type name="double" primitiveType="double" length=1 semanticType="IEEE 754-2008 double" />
            minValue = 4.9E-324d, maxValue = 1.7976931348623157E308d, nullValue=Double.NaN
        -->

        <!-- min/max range and custom null value with optional presence -->
        <type name="t_int16_optional" primitiveType="int16" minValue="10" maxValue="20" presence="optional"
            nullValue="42" semanticType="All attributes in use" />
        <!-- constant value; SBE tool ignores min/max when a constant is set -->
        <type name="t_uint16_constant" primitiveType="uint16" presence="constant" semanticType="Constant value">123</type>
        <!-- required value; presence = required / nullValue = N/A (mutually exclusive with presence=required -->
        <type name="t_int16_required_range" primitiveType="int16" minValue="100" maxValue="200"
            semanticType="Required within range" />

        <!-- 
            FIXED LENGTH ARRAYS
            =======================================================
         -->
        <type name="t_char_array_42" primitiveType="char" length="42" minValue="a" maxValue="z" nullValue="."
            presence="optional" semanticType="Fixed-length US-ASCII" />

        <type name="t_int8_array_5" primitiveType="int8" length="5" semanticType="Fixed-length int8 of length 5" />
        <type name="t_int16_array_4" primitiveType="int16" length="4" semanticType="Fixed-length int16 of length 4" />
        <type name="t_int32_array_3" primitiveType="int32" length="3" semanticType="Fixed-length int32 of length 3" />
        <type name="t_int64_array_2" primitiveType="int32" length="2" semanticType="Fixed-length int32 of length 2" />

        <type name="t_uint8_array_5" primitiveType="uint8" length="5" semanticType="Fixed-length uint8 of length 5" />
        <type name="t_uint16_array_4" primitiveType="uint16" length="4" semanticType="Fixed-length uint16 of length 4" />
        <type name="t_uint32_array_3" primitiveType="uint32" length="3" semanticType="Fixed-length uint32 of length 3" />
        <type name="t_uint64_array_2" primitiveType="uint32" length="2" semanticType="Fixed-length uint32 of length 2" />

        <type name="t_float_array_3" primitiveType="float" length="3" semanticType="Fixed-length float of length 3" />
        <type name="t_double_array_2" primitiveType="double" length="2" semanticType="Fixed-length double of length 2" />

        <!--
            ENUMERATIONS
            ====================================================

            An unsigned integer or character primitive type is selected to contain the number of choices. Implementations
            MUST support char and uint8 types. They MAY additionally support other unsigned integer types to allow more choices.

            SBE tool: char/uint8/uint16
        -->

        <enum name="t_enum_char" encodingType="char">
            <validValue name="Ac">A</validValue>
            <validValue name="Bc">a</validValue>
            <validValue name="Cc">z</validValue>
        </enum>

        <enum name="t_enum_uint8" encodingType="uint8">
            <validValue name="A8">0</validValue>
            <validValue name="B8">1</validValue>
            <validValue name="C8">255</validValue>
        </enum>

        <enum name="t_enum_uint16" encodingType="uint16">
            <validValue name="A16">0</validValue>
            <validValue name="B16">256</validValue>
            <validValue name="C16">65535</validValue>
        </enum>

        <!--
            SETS
            ====================================================

            A multi-value choice is represented by a <set> element. It may contain a number of <choice> elements up to
            the number of bits in the primitive encoding type. The largest number possible is 64 choices in a uint64 encoding.
        -->

        <set name="t_set_uint8" encodingType="uint8">
            <choice name="choiceA">0</choice>
            <choice name="choiceB">1</choice>
            <choice name="choiceD">2</choice>
        </set>

        <!--
            COMPOSITES
            ====================================================

            Composites are like macros: all members are expanded in place. For example: if you specify an enumeration using
            a uint16 for encoding inside the composite, 2 octets are allocated for it and SBE tool generates access methods
            in the encoder/decoder for them. The same goes for a nested composite.

            Composites can be made optional but their presence is piggy-backed to their first member.
            (see https://github.com/FIXTradingCommunity/fix-simple-binary-encoding/issues/84)
        -->
        <composite name="messageHeader">
            <type name="blockLength" primitiveType="uint16" />
            <type name="templateId" primitiveType="uint16" />
            <type name="schemaId" primitiveType="uint16" />
            <type name="version" primitiveType="uint16" />
        </composite>

        <composite name="t_TopLevelComposite">
            <type name="t_TopLevelComposite_int16" primitiveType="int16" minValue="1000" maxValue="2000"
                presence="optional" nullValue="4242" semanticType="All attributes in use" />

            <enum name="t_enum_in_composite_uint8" encodingType="uint8">
                <validValue name="A8">0</validValue>
                <validValue name="B8">1</validValue>
                <validValue name="C8">255</validValue>
            </enum>

            <ref name="ref_t_set_uint8" type="t_set_uint8" />

            <composite name="t_NestedComposite">
                <type name="t_NestedComposite_int32" primitiveType="int32" minValue="10000" maxValue="20000"
                    presence="optional" nullValue="424242" semanticType="All attributes in use" />

                <ref name="ref_t_enum_uint16" type="t_enum_uint16" />
            </composite>
        </composite>
    </types>

    <sbe:message name="MsgAllPrimitivesWithDefaults" id="1"
        semanticType="All primitives using default attributes">
        <field name="f_char" id="1" type="char" />
        <field name="f_int8" id="1" type="int8" />
        <field name="f_int16" id="1" type="int16" />
        <field name="f_int32" id="1" type="int32" />
        <field name="f_int64" id="1" type="int64" />
        <field name="f_uint8" id="1" type="int8" />
        <field name="f_uint16" id="1" type="int16" />
        <field name="f_uint32" id="1" type="int32" />
        <field name="f_uint64" id="1" type="int64" />
        <field name="f_float" id="1" type="float" />
        <field name="f_double" id="1" type="double" />
    </sbe:message>

    <sbe:message name="MsgAllPrimitivesWithLength" id="2">
        <field name="f_char" id="1" type="t_char_array_42" />

        <field name="f_int8_array_5" id="1" type="t_int8_array_5" />
        <field name="f_int16_array_4" id="1" type="t_int16_array_4" />
        <field name="f_int32_array_3" id="1" type="t_int32_array_3" />
        <field name="f_int64_array_2" id="1" type="t_int64_array_2" />

        <field name="f_uint8_array_5" id="1" type="t_uint8_array_5" />
        <field name="f_uint16_array_4" id="1" type="t_uint16_array_4" />
        <field name="f_uint32_array_3" id="1" type="t_uint32_array_3" />
        <field name="f_uint64_array_2" id="1" type="t_uint64_array_2" />

        <field name="f_float_array_3" id="1" type="t_float_array_3" />
        <field name="f_double_array_2" id="1" type="t_double_array_2" />
    </sbe:message>

    <sbe:message name="MsgAllPrimitivesWithAttrs" id="3"
        semanticType="All primitives using default attributes">

        <!-- Fields using types with various combinations of attributes -->
        <field name="f_int16_optional" id="1" type="t_int16_optional" />
        <field name="f_uint16_constant" id="1" type="t_uint16_constant" />
        <field name="f_int16_required_range" id="1" type="t_int16_required_range" />

        <!--
            Practically, you can NOT override any attributes in fields:

            You can NOT override length/minValue/maxValue/nullValue/presence

            The specification at v1.0 was a little confusing because it allows for attributes to be specified in both type
            and field level (also see v1.0 XSD schema), but in practice SBE tool ignores all overrides and uses the value
            at the type definition. The only clarification made is that "presence must be the same at type and field level"
            but in practice it is all of them.

            In specification v2.0 this has changed to clarify: presence/minValue/maxValue/nullValue can only be defined at
            the field level and the type just has the primitive type and length (for char primitives).
        -->
    </sbe:message>

    <sbe:message name="MsgComposites" id="4" semanticType="Composite types">
        <field name="f_TopLevelComposite" id="1" type="t_TopLevelComposite" />
    </sbe:message>

    <sbe:message name="MsgEnumerations" id="5" semanticType="Enumerations of various encoding types">
        <field name="f_enum_char" id="1" type="t_enum_char" />
        <field name="f_enum_uint8" id="1" type="t_enum_uint8" />
        <field name="f_enum_uint16" id="1" type="t_enum_uint16" />
    </sbe:message>

    <sbe:message name="MsgSetChoices" id="6" semanticType="Sets of choices of various encoding types">
        <field name="f_set_uint8" id="1" type="t_set_uint8" />
    </sbe:message>
</sbe:messageSchema>