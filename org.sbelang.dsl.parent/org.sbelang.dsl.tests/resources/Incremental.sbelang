schema org.sbelang.examples.v2.Incremental 
    id = 1 version = 100
//  headerType = a.b.c.D
//  bigEndian

types
{
    simpleType t_char : char
    simpleType t_int8 : int8
    simpleType t_int16 : int16
    simpleType t_int32 : int32
    simpleType t_int64 : int64
    simpleType t_uint8 : uint8
    simpleType t_uint16 : uint16
    simpleType t_uint32 : uint32
    simpleType t_uint64 : uint64
    // simpleType t_Char : int8 // same name in different letter case
    // simpleType t_char : int16 // exactly same name
    simpleType t_float : float
    simpleType t_double : double

    composite CompPrimitives
    {
        primChar   : char
        primIint8  : int8
        primIint16 : int16
        primIint32 : int32
        primIint64 : int64
        primUint8  : uint8
        primUint16 : uint16
        primUint32 : uint32
        primUint64 : uint64
        // primChaR   : char // same name in different letter case
        // primChar   : int8 // exactly same name
        primFloat  : float
        primDouble : double
    }

//    composite CompPrimitives {
//        this_composite_name_should_collide_with_the_one_above : char
//    }
    composite CompSimpleTypes
    {
        st_char   : t_char
        st_int8   : t_int8
        st_int16  : t_int16
        st_int32  : t_int32
        st_int64  : t_int64
        st_uint8  : t_uint8
        st_uint16 : t_uint16
        st_uint32 : t_uint32
        st_uint64 : t_uint64
        // st_chAr   : char // same name in different letter case
        // st_char   : t_char // exactly same name
        st_float  : t_float
        st_double : t_double
//   composite CompPrimitives {
//   this_composite_name_should_collide_with_the_one_above : char
//   }
    }

//  enum CompSimpleType { // not allowed...
//      DUPLICATE_ENUM_NAME('X')
//  }
    enum EnumChar : char
    {
        YES('Y')
        NO('N')
    }

    enum EnumUint8 : uint8
    {
        YES(1)
        NO(0)
    }

    enum EnumUint16 : uint16
    {
        YES(10001)
        NO(10000)
    }

//  composite EnumUint8 {
//      m_enum_char     : EnumChar
//  }
    composite CompEnums
    {
        m_enum_char     : EnumChar
        m_enum_uint8    : EnumUint8
        m_enum_uint16   : EnumUint16

//      composite EnumUint8 {
//          m_enum_char     : EnumChar
//      }
        enum EnumNestedChar : char
        {
            A('A')
            B('B')
            C('C')
        }
    }

    set Set8 : uint8
    {
        ZERO(0)
        SEVEN(7)
    }

    set Set16 : uint16
    {
        ZERO(0)
        FIFTEEN(15)
    }

    set Set32 : uint32
    {
        ZERO(0)
        THIRTY_ONE(31)
    }

    set Set64 : uint64
    {
        ZERO(0)
        SIXTY_THREE(63)
    }

//  composite Set16 {
//      m_set_32     : Set32
//  }
    composite CompSets
    {
        m_set_8     : Set8
        m_set_16    : Set16
        m_set_32    : Set32
        m_set_64    : Set64

//      composite Set16 {
//          m_set_32     : Set32
//      }
        set SetNested16 : uint16
        {
            NESTED_ZERO(0)
            NESTED_FIFTEEN(15)
        }
    }

    composite CompEverything
    {
        m_prim_int      : int32
        m_st_char       : t_char

//      enum EnumNestedChar : char {
//          X('X')
//      }
        enum EnumNestedUint16 : uint16
        {
            ONE(1)
            TWO(2)
            THREE(3)
        }

//      set Set32 : uint32 {
//          ZERO(0)
//      }
        set SetNested32 : uint32
        {
            ZERO(0)
            THIRTY_ONE(31)
        }

        composite CompEverythingNested
        { // inline composite
            m_nested_prim   : uint16
            m_st_float      :   float
        }
        m_ref_comp_enum     : CompEnums
        m_ref_comp_sets     : CompSets
        m_ref_comp_simple   : CompSimpleTypes // reference composite
    }
}